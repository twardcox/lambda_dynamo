/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lambda_dynamo;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDB;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClientBuilder;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDB;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.lambda.runtime.Context;
import com.amazonaws.services.lambda.runtime.LambdaLogger;


public class Library {

    private DynamoDB dynamoDB;
    private String DYNAMODB_TABLE_NAME = "taskmaster";
    private Regions REGION  = Regions.US_WEST_2;

    public boolean logMe(Context context) {
        LambdaLogger logger = context.getLogger();
        logger.log("This has been logged: " + context.toString());
        return true;
    }

    public Task save(Task task){
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

//        String id, String title, String description, String status, String assignee, String image

        Task t = new Task(task.getId(), task.getTitle(), task.getDescription(), task.getStatus(), task.getAssignee(),
                          task.getImage());
        if(task.getAssignee() == null){
            HistoryObj history = new HistoryObj("Task was created and is " + t.getStatus());
            t.addHistory(history);
        } else {
            t.setAssignee(task.getAssignee());
            t.setStatus("assigned");
            HistoryObj history = new HistoryObj("Task was created and assigned to " + task.getAssignee());
            t.addHistory(history);
        }
        ddbMapper.save(t);
        return task;
    }

    public Task update(Task task){
        final AmazonDynamoDB ddb = AmazonDynamoDBClientBuilder.defaultClient();
        DynamoDBMapper ddbMapper = new DynamoDBMapper(ddb);

        Task t = ddbMapper.load(Task.class, task.getId());
        String status = t.getStatus();

        if(t.getAssignee() != null){
            switch(status){
                case "available":
                    t.setStatus("assigned");
                    HistoryObj history = new HistoryObj("Task was assigned to " + t.getAssignee());
                    t.addHistory(history);
                    break;

                case "assigned":
                    t.setStatus("accepted");
                    HistoryObj history2 = new HistoryObj("Task was accepted by " + t.getAssignee());
                    t.addHistory(history2);
                    break;

                case "accepted":
                    t.setStatus("finished");
                    HistoryObj history3 = new HistoryObj("Task was finished by " + t.getAssignee());
                    t.addHistory(history3);
                    t.setStatus("finished");
            }
            ddbMapper.save(t);
        }

        return task;
    }



}
